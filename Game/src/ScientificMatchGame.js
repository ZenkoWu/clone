import React, { useState, useEffect, useRef } from 'react';
import './css/style.css';
const ScientificMatchGame = () => {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ emoji!
  const symbols = ['üß™', 'üå°Ô∏è', 'üß´', '‚öõÔ∏è', 'üî¨', '‚öóÔ∏è'];

  // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–≥—Ä—ã
  const BOARD_SIZE = 8;
  const MIN_MATCH = 3;
  const INITIAL_MOVES = 30;
  const POINTS_PER_MATCH = 10;
  
  // –ë–æ–Ω—É—Å–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
  const COMBINATIONS = {
    FOUR_IN_ROW: {
      name: '–ß–µ—Ç—ã—Ä–µ –≤ —Ä—è–¥',
      points: 50,
      description: '4 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ —Ä—è–¥'
    },
    FIVE_IN_ROW: {
      name: '–ü—è—Ç—å –≤ —Ä—è–¥',
      points: 100,
      description: '5 –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Ä—è–¥'
    },
    T_SHAPE: {
      name: '–¢-–æ–±—Ä–∞–∑–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è',
      points: 75,
      description: '–¢-–æ–±—Ä–∞–∑–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤'
    },
    L_SHAPE: {
      name: 'L-–æ–±—Ä–∞–∑–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è',
      points: 75,
      description: 'L-–æ–±—Ä–∞–∑–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤'
    }
  };
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
  const [gameState, setGameState] = useState({
    board: [],
    score: 0,
    moves: INITIAL_MOVES,
    selectedCell: null,
    isSwapping: false,
    isSoundEnabled: false,
    combinations: []
  });
  
  const [showGameOver, setShowGameOver] = useState(false);
  const boardRef = useRef(null);
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
  const initializeBoard = () => {
    const newBoard = [];
    
    for (let row = 0; row < BOARD_SIZE; row++) {
      newBoard[row] = [];
      for (let col = 0; col < BOARD_SIZE; col++) {
        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        let symbol;
        do {
          symbol = symbols[Math.floor(Math.random() * symbols.length)];
        } while (
          (col >= 2 && 
           newBoard[row][col-1] === symbol && 
           newBoard[row][col-2] === symbol) ||
          (row >= 2 && 
           newBoard[row-1][col] === symbol && 
           newBoard[row-2][col] === symbol)
        );
        
        newBoard[row][col] = symbol;
      }
    }
    
    setGameState(prev => ({
      ...prev,
      board: newBoard,
      score: 0,
      moves: INITIAL_MOVES,
      selectedCell: null,
      isSwapping: false
    }));
    setShowGameOver(false);
  };
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —è—á–µ–π–∫–µ
  const handleCellClick = (row, col) => {
    if (gameState.isSwapping || gameState.moves <= 0) return;
    
    if (!gameState.selectedCell) {
      setGameState(prev => ({ ...prev, selectedCell: { row, col } }));
      return;
    }
    
    const selectedCell = gameState.selectedCell;
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è—é—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∏ —Å–æ—Å–µ–¥–Ω–∏–º–∏
    if (isAdjacent(selectedCell.row, selectedCell.col, row, col)) {
      swapCells(selectedCell.row, selectedCell.col, row, col);
    } else {
      // –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—É—é —è—á–µ–π–∫—É
      setGameState(prev => ({ ...prev, selectedCell: { row, col } }));
    }
  };
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è—é—Ç—Å—è –ª–∏ —è—á–µ–π–∫–∏ —Å–æ—Å–µ–¥–Ω–∏–º–∏
  const isAdjacent = (row1, col1, row2, col2) => {
    return (Math.abs(row1 - row2) === 1 && col1 === col2) ||
           (Math.abs(col1 - col2) === 1 && row1 === row2);
  };
  
  // –û–±–º–µ–Ω —è—á–µ–π–∫–∞–º–∏
  const swapCells = async (row1, col1, row2, col2) => {
    setGameState(prev => ({ ...prev, isSwapping: true }));
    
    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–æ—Å–∫–∏
    const newBoard = [...gameState.board];
    
    // –û–±–º–µ–Ω –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const temp = newBoard[row1][col1];
    newBoard[row1][col1] = newBoard[row2][col2];
    newBoard[row2][col2] = temp;
    
    setGameState(prev => ({ ...prev, board: newBoard }));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const matches = findMatches(newBoard);
    
    if (matches.length > 0) {
      setGameState(prev => ({ ...prev, moves: prev.moves - 1 }));
      
      await removeMatches(matches, newBoard);
      await fillEmptySpaces(newBoard);
      
      if (gameState.moves - 1 <= 0) {
        endGame();
      }
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —è—á–µ–π–∫–∏ –Ω–∞ –º–µ—Å—Ç–æ, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç
      const temp = newBoard[row1][col1];
      newBoard[row1][col1] = newBoard[row2][col2];
      newBoard[row2][col2] = temp;
      
      setGameState(prev => ({ ...prev, board: newBoard }));
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    setGameState(prev => ({
      ...prev,
      selectedCell: null,
      isSwapping: false
    }));
  };
  
  // –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
  const findMatches = (board) => {
    const matches = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (let row = 0; row < BOARD_SIZE; row++) {
      for (let col = 0; col < BOARD_SIZE - 2; col++) {
        const symbol = board[row][col];
        if (symbol && 
            symbol === board[row][col + 1] && 
            symbol === board[row][col + 2]) {
          matches.push({ row, col, direction: 'horizontal' });
        }
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    for (let row = 0; row < BOARD_SIZE - 2; row++) {
      for (let col = 0; col < BOARD_SIZE; col++) {
        const symbol = board[row][col];
        if (symbol && 
            symbol === board[row + 1][col] && 
            symbol === board[row + 2][col]) {
          matches.push({ row, col, direction: 'vertical' });
        }
      }
    }
    
    return matches;
  };
  
  // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
  const checkCombinations = (matches, board) => {
    const combinations = [];
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 4 –∏ 5 –≤ —Ä—è–¥
    matches.forEach(match => {
      if (match.direction === 'horizontal') {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 5 –≤ —Ä—è–¥
        if (match.col + 4 < BOARD_SIZE &&
            board[match.row][match.col] === board[match.row][match.col + 3] &&
            board[match.row][match.col] === board[match.row][match.col + 4]) {
          combinations.push({
            type: 'FIVE_IN_ROW',
            cells: [
              [match.row, match.col],
              [match.row, match.col + 1],
              [match.row, match.col + 2],
              [match.row, match.col + 3],
              [match.row, match.col + 4]
            ]
          });
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 4 –≤ —Ä—è–¥
        else if (match.col + 3 < BOARD_SIZE &&
                 board[match.row][match.col] === board[match.row][match.col + 3]) {
          combinations.push({
            type: 'FOUR_IN_ROW',
            cells: [
              [match.row, match.col],
              [match.row, match.col + 1],
              [match.row, match.col + 2],
              [match.row, match.col + 3]
            ]
          });
        }
      } else {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 5 –≤ —Ä—è–¥ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
        if (match.row + 4 < BOARD_SIZE &&
            board[match.row][match.col] === board[match.row + 3][match.col] &&
            board[match.row][match.col] === board[match.row + 4][match.col]) {
          combinations.push({
            type: 'FIVE_IN_ROW',
            cells: [
              [match.row, match.col],
              [match.row + 1, match.col],
              [match.row + 2, match.col],
              [match.row + 3, match.col],
              [match.row + 4, match.col]
            ]
          });
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ 4 –≤ —Ä—è–¥ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ
        else if (match.row + 3 < BOARD_SIZE &&
                 board[match.row][match.col] === board[match.row + 3][match.col]) {
          combinations.push({
            type: 'FOUR_IN_ROW',
            cells: [
              [match.row, match.col],
              [match.row + 1, match.col],
              [match.row + 2, match.col],
              [match.row + 3, match.col]
            ]
          });
        }
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¢-–æ–±—Ä–∞–∑–Ω—ã–µ –∏ L-–æ–±—Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    for (let row = 0; row < BOARD_SIZE - 2; row++) {
      for (let col = 0; col < BOARD_SIZE - 2; col++) {
        const symbol = board[row][col];
        if (!symbol) continue;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¢-–æ–±—Ä–∞–∑–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        if (row + 2 < BOARD_SIZE && col + 2 < BOARD_SIZE) {
          if (symbol === board[row + 1][col] &&
              symbol === board[row + 2][col] &&
              symbol === board[row + 1][col + 1] &&
              symbol === board[row + 1][col + 2]) {
            combinations.push({
              type: 'T_SHAPE',
              cells: [
                [row, col],
                [row + 1, col],
                [row + 2, col],
                [row + 1, col + 1],
                [row + 1, col + 2]
              ]
            });
          }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ L-–æ–±—Ä–∞–∑–Ω–æ–π –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
        if (row + 2 < BOARD_SIZE && col + 2 < BOARD_SIZE) {
          if (symbol === board[row + 1][col] &&
              symbol === board[row + 2][col] &&
              symbol === board[row][col + 1] &&
              symbol === board[row][col + 2]) {
            combinations.push({
              type: 'L_SHAPE',
              cells: [
                [row, col],
                [row + 1, col],
                [row + 2, col],
                [row, col + 1],
                [row, col + 2]
              ]
            });
          }
        }
      }
    }
    
    return combinations;
  };
  
  // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
  const removeMatches = async (matches, board) => {
    const matchedCells = new Set();
    const combinations = checkCombinations(matches, board);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ –∏–∑ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    combinations.forEach(combination => {
      combination.cells.forEach(([row, col]) => {
        matchedCells.add(`${row},${col}`);
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏
      setGameState(prev => ({
        ...prev,
        score: prev.score + COMBINATIONS[combination.type].points
      }));
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    matches.forEach(match => {
      if (match.direction === 'horizontal') {
        for (let i = 0; i < MIN_MATCH; i++) {
          matchedCells.add(`${match.row},${match.col + i}`);
        }
      } else {
        for (let i = 0; i < MIN_MATCH; i++) {
          matchedCells.add(`${match.row + i},${match.col}`);
        }
      }
    });
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
    setGameState(prev => ({
      ...prev,
      score: prev.score + matchedCells.size * POINTS_PER_MATCH
    }));
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
    const newBoard = [...board];
    matchedCells.forEach(pos => {
      const [row, col] = pos.split(',').map(Number);
      newBoard[row][col] = null;
    });
    
    setGameState(prev => ({ ...prev, board: newBoard }));
    
    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    await new Promise(resolve => setTimeout(resolve, 500));
  };
  
  // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –º–µ—Å—Ç
  const fillEmptySpaces = async (board) => {
    const newBoard = [...board];
    
    // –ü–∞–¥–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    for (let col = 0; col < BOARD_SIZE; col++) {
      let emptySpaces = 0;
      for (let row = BOARD_SIZE - 1; row >= 0; row--) {
        if (!newBoard[row][col]) {
          emptySpaces++;
        } else if (emptySpaces > 0) {
          const newRow = row + emptySpaces;
          newBoard[newRow][col] = newBoard[row][col];
          newBoard[row][col] = null;
        }
      }
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    for (let col = 0; col < BOARD_SIZE; col++) {
      for (let row = 0; row < BOARD_SIZE; row++) {
        if (!newBoard[row][col]) {
          const symbol = symbols[Math.floor(Math.random() * symbols.length)];
          newBoard[row][col] = symbol;
        }
      }
    }
    
    setGameState(prev => ({ ...prev, board: newBoard }));
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const newMatches = findMatches(newBoard);
    if (newMatches.length > 0) {
      await removeMatches(newMatches, newBoard);
      await fillEmptySpaces(newBoard);
    }
  };
  
  // –û–∫–æ–Ω—á–∞–Ω–∏–µ –∏–≥—Ä—ã
  const endGame = () => {
    setShowGameOver(true);
  };
  
  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
  const toggleSound = () => {
    setGameState(prev => ({
      ...prev,
      isSoundEnabled: !prev.isSoundEnabled
    }));
  };
  
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    initializeBoard();
  }, []);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Ö–æ–¥–æ–≤
  useEffect(() => {
    if (gameState.moves <= 0) {
      endGame();
    }
  }, [gameState.moves]);
  
  return (
    <div className="game-container">
      <header className="game-header">
        <h1>–ù–∞—É—á–Ω—ã–π –¢—Ä–∏ –≤ —Ä—è–¥</h1>
        <div className="controls">
          <button 
            onClick={toggleSound}
            className="control-button"
          >
            {gameState.isSoundEnabled ? 'üîä –ó–≤—É–∫ –≤–∫–ª—é—á–µ–Ω' : 'üîá –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫'}
          </button>
          <button 
            onClick={initializeBoard}
            className="control-button"
          >
            üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞
          </button>
        </div>
      </header>
      
      <div className="game-info">
        <div className="score-container">
          <span className="score-label">–°—á—ë—Ç:</span>
          <span id="score" className="score-value">{gameState.score}</span>
        </div>
        <div className="moves-container">
          <span className="moves-label">–•–æ–¥—ã:</span>
          <span id="moves" className="moves-value">{gameState.moves}</span>
        </div>
      </div>

      <div className="combinations-list">
        <h2>–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏</h2>
        <ul>
          <li>4 –≤ —Ä—è–¥ = 50 –æ—á–∫–æ–≤</li>
          <li>5 –≤ —Ä—è–¥ = 100 –æ—á–∫–æ–≤</li>
          <li>–¢-–æ–±—Ä–∞–∑–Ω–∞—è = 75 –æ—á–∫–æ–≤</li>
          <li>L-–æ–±—Ä–∞–∑–Ω–∞—è = 75 –æ—á–∫–æ–≤</li>
        </ul>
      </div>

      <div className="board-container">
        <div className="board" ref={boardRef}>
          {gameState.board.map((row, rowIndex) => (
            <div key={`row-${rowIndex}`} className="board-row">
              {row.map((cell, colIndex) => (
                <div
                  key={`cell-${rowIndex}-${colIndex}`}
                  className={`cell ${
                    gameState.selectedCell?.row === rowIndex && 
                    gameState.selectedCell?.col === colIndex ? 'selected' : ''
                  }`}
                  onClick={() => handleCellClick(rowIndex, colIndex)}
                >
                  {cell}
                </div>
              ))}
            </div>
          ))}
        </div>
      </div>

      {showGameOver && (
        <div className="game-over">
          <div className="game-over-content">
            <h2>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</h2>
            <p>–í–∞—à —Å—á—ë—Ç: <span id="finalScore">{gameState.score}</span></p>
            <button 
              onClick={initializeBoard}
              className="control-button"
            >
              –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default ScientificMatchGame;