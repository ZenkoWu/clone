import { useState, useEffect } from "react";
import "./MatchBoard.css";
import { useSound } from "../../utils/useSound";
import { checkCombinations } from "../../utils/checkCombinations";
import { findMatches } from "../../utils/findMatches";
import { SOUNDS, COMBINATIONS, SYMBOLS } from "../../constants";

const BOARD_SIZE = 8;
const MIN_MATCH = 3;
const INITIAL_MOVES = 30;
const POINTS_PER_MATCH = 10;

export function MatchBoard() {
  const [board, setBoard] = useState([]);
  const [score, setScore] = useState(0);
  const [moves, setMoves] = useState(INITIAL_MOVES);
  const [matchedCells, setMatchedCells] = useState([]);
  const [selectedCell, setSelectedCell] = useState(null);
  const [isSwapping, setIsSwapping] = useState(false);
  const [isSoundEnabled, setIsSoundEnabled] = useState(true);
  const [gameOver, setGameOver] = useState(false);
  const [combinationPopup, setCombinationPopup] = useState(null);

  const playMoveSound = useSound(SOUNDS.move);
  const playGameOverSound = useSound(SOUNDS.gameOver);
  const playCombinationSound = useSound(SOUNDS.combination);

  // –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–æ–≤
  const playSound = (soundFn) => {
    if (isSoundEnabled) {
      soundFn();
    }
  };
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
  useEffect(() => {
    initializeBoard();
  }, []);

  const initializeBoard = () => {
    const newBoard = [];
    for (let row = 0; row < BOARD_SIZE; row++) {
      newBoard[row] = [];
      for (let col = 0; col < BOARD_SIZE; col++) {
        let symbol;
        do {
          symbol = SYMBOLS[Math.floor(Math.random() * SYMBOLS.length)];
        } while (
          (col >= 2 &&
            newBoard[row][col - 1] === symbol &&
            newBoard[row][col - 2] === symbol) ||
          (row >= 2 &&
            newBoard[row - 1][col] === symbol &&
            newBoard[row - 2][col] === symbol)
        );
        newBoard[row][col] = symbol;
      }
    }
    setBoard(newBoard);
    setScore(0);
    setMoves(INITIAL_MOVES);
    setGameOver(false);
  };

  const handleCellClick = (row, col) => {
    if (isSwapping || moves <= 0 || gameOver) return;

    if (!selectedCell) {
      setSelectedCell({ row, col });
      return;
    }

    const { row: selectedRow, col: selectedCol } = selectedCell;

    if (isAdjacent(selectedRow, selectedCol, row, col)) {
      swapCells(selectedRow, selectedCol, row, col);
    } else {
      setSelectedCell({ row, col });
    }
  };

  const isAdjacent = (row1, col1, row2, col2) => {
    return (
      (Math.abs(row1 - row2) === 1 && col1 === col2) ||
      (Math.abs(col1 - col2) === 1 && row1 === row2)
    );
  };

  const swapCells = async (row1, col1, row2, col2) => {
    playSound(playMoveSound);
    setIsSwapping(true);
    const newBoard = [...board];

    // –í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±–º–µ–Ω –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    const temp = newBoard[row1][col1];
    newBoard[row1][col1] = newBoard[row2][col2];
    newBoard[row2][col2] = temp;
    setBoard([...newBoard]);

    const matches = findMatches(newBoard, BOARD_SIZE);

    if (matches.length > 0) {
      setMoves(moves - 1);
      await removeMatches(matches, newBoard);
    } else {
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ, –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
      newBoard[row2][col2] = newBoard[row1][col1];
      newBoard[row1][col1] = temp;
      setBoard([...newBoard]);
    }

    setSelectedCell(null);
    setIsSwapping(false);

    if (moves - 1 <= 0) {
      endGame();
    }
  };

  const removeMatches = async (matches, currentBoard) => {
    const cellsToRemove = new Set();
    const combinations = checkCombinations(currentBoard, matches, BOARD_SIZE);

    // –î–æ–±–∞–≤–ª—è–µ–º —è—á–µ–π–∫–∏ –∏–∑ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    combinations.forEach((combination) => {
      playSound(playCombinationSound);
      combination.cells.forEach(([row, col]) => {
        cellsToRemove.add(`${row},${col}`);
      });

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø–∞–ø –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
      setCombinationPopup({
        name: COMBINATIONS[combination.type].name,
        description: COMBINATIONS[combination.type].description,
        points: COMBINATIONS[combination.type].points,
      });

      // –£–±–∏—Ä–∞–µ–º –ø–æ–ø–∞–ø —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
      setTimeout(() => {
        setCombinationPopup(null);
      }, 2000);

      // –î–æ–±–∞–≤–ª—è–µ–º –±–æ–Ω—É—Å–Ω—ã–µ –æ—á–∫–∏
      setScore(score + COMBINATIONS[combination.type].points);
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    matches.forEach((match) => {
      if (match.direction === "horizontal") {
        for (let i = 0; i < MIN_MATCH; i++) {
          cellsToRemove.add(`${match.row},${match.col + i}`);
        }
      } else {
        for (let i = 0; i < MIN_MATCH; i++) {
          cellsToRemove.add(`${match.row + i},${match.col}`);
        }
      }
    });

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∏—Ä—É–µ–º—ã–µ —è—á–µ–π–∫–∏
    setMatchedCells(Array.from(cellsToRemove));
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ (0.5s –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ)
    await new Promise((resolve) => setTimeout(resolve, 500));

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞
    setScore(score + cellsToRemove.size * POINTS_PER_MATCH);

    const newBoard = [...currentBoard];
    cellsToRemove.forEach((pos) => {
      const [row, col] = pos.split(",").map(Number);
      newBoard[row][col] = null;
    });

    setBoard([...newBoard]);

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏
    await new Promise((resolve) => setTimeout(resolve, 100));

    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –º–µ—Å—Ç
    await fillEmptySpaces(newBoard);
    // –û—á–∏—â–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å–∫—É
    setMatchedCells([]);
  };

  const fillEmptySpaces = async (currentBoard) => {
    const newBoard = [...currentBoard];

    // –ü–∞–¥–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
    for (let col = 0; col < BOARD_SIZE; col++) {
      let emptySpaces = 0;
      for (let row = BOARD_SIZE - 1; row >= 0; row--) {
        if (!newBoard[row][col]) {
          emptySpaces++;
        } else if (emptySpaces > 0) {
          const newRow = row + emptySpaces;
          newBoard[newRow][col] = newBoard[row][col];
          newBoard[row][col] = null;
        }
      }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    for (let col = 0; col < BOARD_SIZE; col++) {
      for (let row = 0; row < BOARD_SIZE; row++) {
        if (!newBoard[row][col]) {
          const symbol = SYMBOLS[Math.floor(Math.random() * SYMBOLS.length)];
          newBoard[row][col] = symbol;
        }
      }
    }
    setBoard([...newBoard]);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
    const newMatches = findMatches(newBoard, BOARD_SIZE);
    if (newMatches.length > 0) {
      await removeMatches(newMatches, newBoard);
    }
  };

  const endGame = () => {
    playSound(playGameOverSound);
    setGameOver(true);
  };

  const toggleSound = () => {
    if (isSoundEnabled) playMoveSound();
    setIsSoundEnabled(!isSoundEnabled);
  };

  const restartGame = () => {
    initializeBoard();
  };

  return (
    <div className="game-container">
      <header className="game-header">
        <h1>–ù–∞—É—á–Ω—ã–π –¢—Ä–∏ –≤ —Ä—è–¥</h1>
        <div className="controls">
          <button onClick={toggleSound} className="control-button">
            {isSoundEnabled ? "üîä –ó–≤—É–∫ –≤–∫–ª—é—á–µ–Ω" : "üîá –í–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫"}
          </button>
          <button onClick={restartGame} className="control-button">
            üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞
          </button>
        </div>
      </header>

      <div className="game-info">
        <div className="score-container">
          <span className="score-label">–°—á—ë—Ç: </span>
          <span className="score-value">{score}</span>
        </div>
        <div className="moves-container">
          <span className="moves-label">–•–æ–¥—ã: </span>
          <span className="moves-value">{moves}</span>
        </div>
      </div>

      <div className="combinations-list">
        <h2>–ö–æ–º–±–∏–Ω–∞—Ü–∏–∏</h2>
        <ul>
          <li>4 –≤ —Ä—è–¥ = 50 –æ—á–∫–æ–≤</li>
          <li>5 –≤ —Ä—è–¥ = 100 –æ—á–∫–æ–≤</li>
          <li>–¢-–æ–±—Ä–∞–∑–Ω–∞—è = 75 –æ—á–∫–æ–≤</li>
          <li>L-–æ–±—Ä–∞–∑–Ω–∞—è = 75 –æ—á–∫–æ–≤</li>
        </ul>
      </div>

      <div className="board-container">
        <div className="board">
          {board.map((row, rowIndex) => (
            <div key={rowIndex} className="board-row">
              {row.map((cell, colIndex) => {
                const isMatched = matchedCells.includes(
                  `${rowIndex},${colIndex}`
                );
                return (
                  <div
                    key={`${rowIndex}-${colIndex}`}
                    className={`cell ${isMatched ? "matched" : ""} ${
                      selectedCell?.row === rowIndex &&
                      selectedCell?.col === colIndex
                        ? "selected"
                        : ""
                    }`}
                    onClick={() => handleCellClick(rowIndex, colIndex)}
                  >
                    {cell}
                  </div>
                );
              })}
            </div>
          ))}
        </div>
      </div>

      {gameOver && (
        <div className="game-over">
          <div className="game-over-content">
            <h2>–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!</h2>
            <p>–í–∞—à —Å—á—ë—Ç: {score}</p>
            <button onClick={restartGame} className="control-button">
              –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        </div>
      )}

      {combinationPopup && (
        <div className="combination-popup show">
          <h3>{combinationPopup.name}!</h3>
          <p>{combinationPopup.description}</p>
          <p>+{combinationPopup.points} –æ—á–∫–æ–≤</p>
        </div>
      )}
    </div>
  );
}
